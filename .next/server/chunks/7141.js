"use strict";exports.id=7141,exports.ids=[7141],exports.modules={7154:(e,t,r)=>{r.d(t,{b1:()=>w,Eu:()=>f,kQ:()=>g,Dv:()=>l});var a=r(18011);let o={User:null,SocialProfile:null,SocialMetrics:null,ContentSuggestion:null};function n(){return{findOne:()=>Promise.resolve(null),findById:()=>Promise.resolve(null),find:()=>Promise.resolve([]),create:()=>Promise.resolve({}),updateOne:()=>Promise.resolve({}),deleteOne:()=>Promise.resolve({})}}(0,a.default)().catch(e=>console.error("Error connecting to database:",e));class s{constructor(e,t){this.model=e,this.modelName=t}async create(e){try{return await (0,a.default)(),await this.model.create(e)}catch(e){throw console.error(`Error creating ${this.modelName}:`,e),e}}async find(e={}){try{return await (0,a.default)(),await this.model.find(e).exec()}catch(e){throw console.error(`Error finding ${this.modelName}:`,e),e}}async findById(e){try{return await (0,a.default)(),await this.model.findById(e).exec()}catch(e){throw console.error(`Error finding ${this.modelName} by ID:`,e),e}}async findOne(e){try{return await (0,a.default)(),await this.model.findOne(e).exec()}catch(e){throw console.error(`Error finding one ${this.modelName}:`,e),e}}async updateById(e,t){try{return await (0,a.default)(),await this.model.findByIdAndUpdate(e,t,{new:!0}).exec()}catch(e){throw console.error(`Error updating ${this.modelName}:`,e),e}}async deleteById(e){try{return await (0,a.default)(),await this.model.findByIdAndDelete(e).exec()}catch(e){throw console.error(`Error deleting ${this.modelName}:`,e),e}}async count(e={}){try{return await (0,a.default)(),await this.model.countDocuments(e).exec()}catch(e){throw console.error(`Error counting ${this.modelName}:`,e),e}}}let i=s;class d extends i{constructor(){super((o.User||(r.e(6929).then(r.bind(r,36929)).then(e=>{o.User=e.default()}).catch(e=>{console.error("Error loading User model:",e)}),o.User=n()),o.User),"User")}async getUserByEmail(e){try{let t=await this.findOne({email:e.toLowerCase()});if(!t)return null;let r=t.toObject?t.toObject():t;return delete r.password,{id:r._id.toString(),name:r.name,email:r.email,image:r.image,emailVerified:r.emailVerified,role:r.role,accounts:r.accounts?.map(e=>({...e,id:e._id?.toString()})),createdAt:r.createdAt,updatedAt:r.updatedAt}}catch(e){throw console.error("Error getting user by email:",e),e}}async getUserById(e){try{let t=await this.findById(e);if(!t)return null;let r=t.toObject?t.toObject():t;return delete r.password,{id:r._id.toString(),name:r.name,email:r.email,image:r.image,emailVerified:r.emailVerified,role:r.role,accounts:r.accounts?.map(e=>({...e,id:e._id?.toString()})),createdAt:r.createdAt,updatedAt:r.updatedAt}}catch(e){throw console.error("Error getting user by ID:",e),e}}async createUser(e){try{let t=await this.create({...e,email:e.email.toLowerCase()}),r=t.toObject?t.toObject():t;return delete r.password,{id:r._id.toString(),name:r.name,email:r.email,image:r.image,emailVerified:r.emailVerified,role:r.role,accounts:[],createdAt:r.createdAt,updatedAt:r.updatedAt}}catch(e){throw console.error("Error creating user:",e),e}}async updateUser(e,t){try{t.email&&(t.email=t.email.toLowerCase());let r=await this.updateById(e,t);if(!r)return null;let a=r.toObject?r.toObject():r;return delete a.password,{id:a._id.toString(),name:a.name,email:a.email,image:a.image,emailVerified:a.emailVerified,role:a.role,accounts:a.accounts?.map(e=>({...e,id:e._id?.toString()})),createdAt:a.createdAt,updatedAt:a.updatedAt}}catch(e){throw console.error("Error updating user:",e),e}}async addUserAccount(e,t){try{let r=await this.findById(e);if(!r)return null;r.accounts=r.accounts||[],r.accounts.push(t),await r.save();let a=r.toObject?r.toObject():r;return delete a.password,{id:a._id.toString(),name:a.name,email:a.email,image:a.image,emailVerified:a.emailVerified,role:a.role,accounts:a.accounts?.map(e=>({...e,id:e._id?.toString()})),createdAt:a.createdAt,updatedAt:a.updatedAt}}catch(e){throw console.error("Error adding user account:",e),e}}}let l=new d;var c=r(56037),u=r.n(c);class m extends i{constructor(){super((o.SocialProfile||(r.e(1720).then(r.bind(r,1720)).then(e=>{o.SocialProfile=e.default()}).catch(e=>{console.error("Error loading SocialProfile model:",e)}),o.SocialProfile=n()),o.SocialProfile),"SocialProfile")}async getProfilesByUserId(e){try{return(await this.find({userId:e})).map(e=>({id:e._id.toString(),userId:e.userId.toString(),platform:e.platform,username:e.username,profileUrl:e.profileUrl||"",connected:e.isConnected,followers:0,lastUpdated:e.updatedAt.toISOString(),createdAt:e.createdAt,updatedAt:e.updatedAt}))}catch(e){throw console.error("Error getting profiles by user ID:",e),e}}async getUserPlatformProfile(e,t){try{let r=await this.findOne({userId:e,platform:t});if(!r)return null;return{id:r._id.toString(),userId:r.userId.toString(),platform:r.platform,username:r.username,profileUrl:r.profileUrl||"",connected:r.isConnected,followers:0,lastUpdated:r.updatedAt.toISOString(),createdAt:r.createdAt,updatedAt:r.updatedAt}}catch(e){throw console.error("Error getting user platform profile:",e),e}}async addProfile(e){try{let t=await this.create({...e,userId:new(u()).Types.ObjectId(e.userId),isConnected:e.connected,platform:e.platform});return{id:t._id.toString(),userId:t.userId.toString(),platform:t.platform,username:t.username,profileUrl:t.profileUrl||"",connected:t.isConnected,followers:0,lastUpdated:t.updatedAt.toISOString(),createdAt:t.createdAt,updatedAt:t.updatedAt}}catch(e){throw console.error("Error adding profile:",e),e}}async updateProfile(e,t){try{let r={...t};"connected"in t&&(r.isConnected=t.connected,delete r.connected);let a=await this.updateById(e,r);if(!a)return null;return{id:a._id.toString(),userId:a.userId.toString(),platform:a.platform,username:a.username,profileUrl:a.profileUrl||"",connected:a.isConnected,followers:0,lastUpdated:a.updatedAt.toISOString(),createdAt:a.createdAt,updatedAt:a.updatedAt}}catch(e){throw console.error("Error updating profile:",e),e}}async deleteProfile(e){try{if(!await this.deleteById(e))return{success:!1,message:"Profile not found"};return{success:!0,message:"Profile deleted successfully"}}catch(e){throw console.error("Error deleting profile:",e),e}}}let g=new m;class p extends i{constructor(){super((o.SocialMetrics||(r.e(8480).then(r.bind(r,88480)).then(e=>{o.SocialMetrics=e.default()}).catch(e=>{console.error("Error loading SocialMetrics model:",e)}),o.SocialMetrics=n()),o.SocialMetrics),"SocialMetrics")}async getMetricsByUserId(e,t){try{let r={userId:new(u()).Types.ObjectId(e)};return t?.platform&&(r.platform=t.platform),t?.profileId&&(r.profileId=new(u()).Types.ObjectId(t.profileId)),(t?.startDate||t?.endDate)&&(r.date={},t.startDate&&(r.date.$gte=t.startDate),t.endDate&&(r.date.$lte=t.endDate)),(await this.find(r)).map(e=>({id:e._id.toString(),userId:e.userId.toString(),profileId:e.profileId.toString(),platform:e.platform,date:e.date,followers:e.followers,following:e.following,posts:e.posts,likes:e.likes,comments:e.comments,shares:e.shares,impressions:e.impressions,reach:e.reach,engagement:e.engagement,engagementRate:e.engagementRate,createdAt:e.createdAt,updatedAt:e.updatedAt}))}catch(e){throw console.error("Error getting metrics by user ID:",e),e}}async getMetricsByProfileId(e,t){try{let r={profileId:new(u()).Types.ObjectId(e)};return(t?.startDate||t?.endDate)&&(r.date={},t.startDate&&(r.date.$gte=t.startDate),t.endDate&&(r.date.$lte=t.endDate)),(await this.find(r)).map(e=>({id:e._id.toString(),userId:e.userId.toString(),profileId:e.profileId.toString(),platform:e.platform,date:e.date,followers:e.followers,following:e.following,posts:e.posts,likes:e.likes,comments:e.comments,shares:e.shares,impressions:e.impressions,reach:e.reach,engagement:e.engagement,engagementRate:e.engagementRate,createdAt:e.createdAt,updatedAt:e.updatedAt}))}catch(e){throw console.error("Error getting metrics by profile ID:",e),e}}async addMetrics(e){try{let t=await this.create({...e,userId:new(u()).Types.ObjectId(e.userId),profileId:new(u()).Types.ObjectId(e.profileId)});return{id:t._id.toString(),userId:t.userId.toString(),profileId:t.profileId.toString(),platform:t.platform,date:t.date,followers:t.followers,following:t.following,posts:t.posts,likes:t.likes,comments:t.comments,shares:t.shares,impressions:t.impressions,reach:t.reach,engagement:t.engagement,engagementRate:t.engagementRate,createdAt:t.createdAt,updatedAt:t.updatedAt}}catch(e){throw console.error("Error adding metrics:",e),e}}async updateMetrics(e,t){try{let r=await this.updateById(e,t);if(!r)return null;return{id:r._id.toString(),userId:r.userId.toString(),profileId:r.profileId.toString(),platform:r.platform,date:r.date,followers:r.followers,following:r.following,posts:r.posts,likes:r.likes,comments:r.comments,shares:r.shares,impressions:r.impressions,reach:r.reach,engagement:r.engagement,engagementRate:r.engagementRate,createdAt:r.createdAt,updatedAt:r.updatedAt}}catch(e){throw console.error("Error updating metrics:",e),e}}async getFollowerGrowth(e,t=30,r){try{let a=new Date,o=new Date;o.setDate(o.getDate()-t);let n={userId:new(u()).Types.ObjectId(e),date:{$gte:o,$lte:a}};return r&&(n.platform=r),(await this.find(n)).map(e=>({date:e.date,followers:e.followers,platform:e.platform}))}catch(e){throw console.error("Error getting follower growth:",e),e}}}let f=new p;class h extends i{constructor(){super((o.ContentSuggestion||(r.e(1075).then(r.bind(r,61075)).then(e=>{o.ContentSuggestion=e.default()}).catch(e=>{console.error("Error loading ContentSuggestion model:",e)}),o.ContentSuggestion=n()),o.ContentSuggestion),"ContentSuggestion")}async getSuggestionsByUserId(e,t){try{let r={userId:new(u()).Types.ObjectId(e)};return t?.status&&(r.status=t.status),t?.platform&&(r.platform=t.platform),(await this.find(r)).map(e=>({id:e._id.toString(),userId:e.userId.toString(),platform:e.platform,title:e.title,content:e.content,imagePrompt:e.imagePrompt,status:e.status,scheduledDate:e.scheduledDate,tags:e.tags,aiGenerated:e.aiGenerated,metadata:e.metadata?Object.fromEntries(e.metadata):{},createdAt:e.createdAt,updatedAt:e.updatedAt}))}catch(e){throw console.error("Error getting suggestions by user ID:",e),e}}async getSuggestionById(e){try{let t=await this.findById(e);if(!t)return null;return{id:t._id.toString(),userId:t.userId.toString(),platform:t.platform,title:t.title,content:t.content,imagePrompt:t.imagePrompt,status:t.status,scheduledDate:t.scheduledDate,tags:t.tags,aiGenerated:t.aiGenerated,metadata:t.metadata?Object.fromEntries(t.metadata):{},createdAt:t.createdAt,updatedAt:t.updatedAt}}catch(e){throw console.error("Error getting suggestion by ID:",e),e}}async createSuggestion(e){try{let t=e.metadata?new Map(Object.entries(e.metadata)):void 0,r=await this.create({...e,userId:new(u()).Types.ObjectId(e.userId),metadata:t});return{id:r._id.toString(),userId:r.userId.toString(),platform:r.platform,title:r.title,content:r.content,imagePrompt:r.imagePrompt,status:r.status,scheduledDate:r.scheduledDate,tags:r.tags,aiGenerated:r.aiGenerated,metadata:r.metadata?Object.fromEntries(r.metadata):{},createdAt:r.createdAt,updatedAt:r.updatedAt}}catch(e){throw console.error("Error creating suggestion:",e),e}}async updateSuggestion(e,t){try{let r={...t};t.metadata&&(r.metadata=new Map(Object.entries(t.metadata)));let a=await this.updateById(e,r);if(!a)return null;return{id:a._id.toString(),userId:a.userId.toString(),platform:a.platform,title:a.title,content:a.content,imagePrompt:a.imagePrompt,status:a.status,scheduledDate:a.scheduledDate,tags:a.tags,aiGenerated:a.aiGenerated,metadata:a.metadata?Object.fromEntries(a.metadata):{},createdAt:a.createdAt,updatedAt:a.updatedAt}}catch(e){throw console.error("Error updating suggestion:",e),e}}async deleteSuggestion(e){try{if(!await this.deleteById(e))return{success:!1,message:"Suggestion not found"};return{success:!0,message:"Suggestion deleted successfully"}}catch(e){throw console.error("Error deleting suggestion:",e),e}}async updateSuggestionStatus(e,t){return this.updateSuggestion(e,{status:t})}}let w=new h},18011:(e,t,r)=>{r.d(t,{default:()=>c});var a=r(56037),o=r.n(a);let n=process.env.DATABASE_URL||"mongodb://localhost:27017/connect-analyze-evolve-social",s=process.env.DB_NAME||"connect-analyze-evolve-social",i={uri:n,dbName:s,options:{dbName:s,bufferCommands:!1,autoIndex:!0,maxPoolSize:10,serverSelectionTimeoutMS:5e3,socketTimeoutMS:45e3,family:4}};i.uri||console.warn("MongoDB URI not defined, using default connection string"),console.log(`MongoDB connecting to database: ${i.dbName}`);let d="undefined"!=typeof global?global:{};d.mongoose||(d.mongoose={conn:null,promise:null});let l=d.mongoose,c=async function e(){if(l.conn)return l.conn;l.promise||("function"==typeof o().connect?l.promise=o().connect(i.uri,i.options).then(e=>(console.log("✅ MongoDB connected successfully"),e)).catch(e=>{throw console.error("❌ MongoDB connection error:",e),e}):(console.warn("⚠️ Direct MongoDB connection not available in browser. Using API endpoints instead."),l.promise=Promise.resolve(o())));try{return l.conn=await l.promise,l.conn}catch(e){throw console.error("Failed to connect to MongoDB:",e),e}}},74264:(e,t,r)=>{r.d(t,{A:()=>n});var a=r(82015);r(8732),r(467);let o=(0,a.createContext)(void 0),n=()=>{let e=(0,a.useContext)(o);if(void 0===e)throw Error("useAuth must be used within an AuthProvider");return e}}};