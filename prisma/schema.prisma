// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String              @unique
  password       String?
  image          String?
  emailVerified  DateTime?
  role           String              @default("user")
  accounts       Account[]
  socialProfiles SocialProfile[]
  socialMetrics  SocialMetrics[]
  suggestions    ContentSuggestion[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model SocialProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  platform    String
  username    String
  profileUrl  String
  connected   Boolean  @default(true)
  followers   Int      @default(0)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model SocialMetrics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  platform  String
  metrics   Json
  dailyData Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model ContentSuggestion {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  platform        String
  title           String
  content         String
  mediaType       String
  suggestedTags   String[]
  bestTimeToPost  DateTime
  aiGeneratedScore Float    @default(0)
  status          String   @default("pending")
  engagement      Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
